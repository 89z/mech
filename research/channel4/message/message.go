package main

import (
   "encoding/base64"
   "encoding/json"
   "github.com/89z/format/protobuf"
   "os"
)

const (
   failMessage = "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"
   passMessage = "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"
)

func main() {
   buf, err := base64.StdEncoding.DecodeString(failMessage)
   //buf, err := base64.StdEncoding.DecodeString(passMessage)
   if err != nil {
      panic(err)
   }
   mes, err := protobuf.Unmarshal(buf)
   if err != nil {
      panic(err)
   }
   enc := json.NewEncoder(os.Stdout)
   enc.SetIndent("", " ")
   enc.Encode(mes)
}
